/*
1. Consider the following programs which uses threads.  
Assume that all system calls return normally:

a. Observe what each of these programs do
b. Circle the programs which are guaranteed to print out 42.
*/

//Program 1
void *thread(void *vargp)
{
	pthread_exit((void*)42);
}
int main()
{
	int i;
	pthread_t tid;
	pthread_create(&tid, NULL, thread, NULL);
	pthread_join(tid, (void **)&i);
	printf("%d\n",i);
}


//Program 2
void *thread(void *vargp)
{
	exit(42);
}
int main()
{
	int i;
	pthread_t tid;
	pthread_create(&tid, NULL, thread, NULL);
	pthread_join(tid, (void **)&i);
	printf("%d\n",i);
}

//Program 3
void *thread(void *vargp)
{
	int *ptr = (int*)vargp;
	pthread_exit((void*)*ptr);
}
void *thread2(void *vargp)
{
	int *ptr = (int*)vargp;
	*ptr = 0;
	pthread_exit((void*)31);
}
int main()
{
	int i = 42;
	pthread_t tid, tid2;
	pthread_create(&tid, NULL, thread, (void*)&i);
	pthread_create(&tid2, NULL, thread2, (void*)&i);
	pthread_join(tid, (void**)&i);
	pthread_join(tid2, NULL);
	printf("%d\n",i);
}

//Program 4
void *thread(void *vargp)
{
	pthread_detach(pthread_self());
	pthread_exit((void*)42);
}
int main()
{
	int i = 0;
	pthread_t tid;
	pthread_create(&tid, NULL, thread, (void*)&i);
	pthread_join(tid, (void**)&i);
	printf("%d\n",i);
}

//Program 5
int i = 42;
void *thread(void *vargp)
{
	printf("%d\n",i);
}
void *thread2(void *vargp)
{
	i = 31;
}
int main()
{
	pthread_t tid, tid2;
	pthread_create(&tid2, NULL, thread2, (void*)&i);
	pthread_create(&tid, NULL, thread, (void*)&i);
	pthread_join(tid, (void**)&i);
	pthread_join(tid2, NULL);
}


/*
2. Make a program using threads that allow multiply a matrix by a scalar.

3. Write a multithreaded program that calculates various statistical values
for a list of numbers. This program will be passed a series of numbers on
the command line and will then create three separate worker threads.
One thread will determine the average of the numbers, the second
will determine the maximum value, and the third will determine the
minimum value. For example, suppose your program is passed the
integers: 90 81 78 95 79 72 85
The program will report:

The average value is 82
The minimum value is 72
The maximum value is 95

The variables representing the average, minimum, and maximum values
will be stored globally. The worker threads will set these values, and the
parent thread will output the values once the workers have exited.

4. Ping with threads.
Write a multithread program that allow To determine in a local network which addresses 
are active or which computers are active, using the ping command (you can use the ping_test.c code). 
A solution without threads is highly inefficient, because the program will 
have to wait for every ping. 

*/